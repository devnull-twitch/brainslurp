package shared

import "fmt"
import "strings"

import "github.com/crazy3lf/colorconv"
import "github.com/sirupsen/logrus"
import "github.com/yuin/goldmark"
import pb_issue "github.com/devnull-twitch/brainslurp/lib/proto/issue"
import pb_flow "github.com/devnull-twitch/brainslurp/lib/proto/flow"
import pb_tag "github.com/devnull-twitch/brainslurp/lib/proto/tag"
import pb_user "github.com/devnull-twitch/brainslurp/lib/proto/user" 

//TODO: Move this to pages package as it isnt shared at all 

func makeIssueRowID(no uint64) string {
  return fmt.Sprintf("issue-no-%d", no)
}

func makeIssueDetailsID(no uint64) string {
  return fmt.Sprintf("issue-details-%d", no)
}

func getTextColorFromBGColor(hexStr string) string {
  c, err := colorconv.HexToColor(hexStr)
  if err != nil {
    logrus.WithFields(logrus.Fields{
      "error": err,
      "color": hexStr,
    }).Warn("unable to check color")
    return "#000"
  }

  _, _, l := colorconv.ColorToHSL(c)
  if l < 0.5 {
    return "#FFF"
  } else {
    return "#000"
  }
}

func makeNewTagURL(projectNo uint64, issueNo uint64) templ.SafeURL {
  return templ.URL(fmt.Sprintf("/project/%d/issue/%d/tags", projectNo, issueNo))
}

func makeRemoveTagURL(projectNo uint64, issueNo uint64, issueTagNo uint64) templ.SafeURL {
  return templ.URL(fmt.Sprintf("/project/%d/issue/%d/tag/%d", projectNo, issueNo, issueTagNo))
}

func makeFlowActionURL(projectNo uint64, issueNo uint64, flowNo uint64, actionIndex int) templ.SafeURL {
  return templ.URL(fmt.Sprintf("/project/%d/issue/%d/flow/%d/action/%d", projectNo, issueNo, flowNo, actionIndex))
}

func makeUnassignActionURL(projectNo uint64, issueNo uint64, userNo uint64) templ.SafeURL {
  return templ.URL(fmt.Sprintf("/project/%d/issue/%d/unassign/%d", projectNo, issueNo, userNo))
}

func makeAssignActionURL(projectNo uint64, issueNo uint64) templ.SafeURL {
  return templ.URL(fmt.Sprintf("/project/%d/issue/%d/assign", projectNo, issueNo))
}

func makeNewCommentURL(projectNo uint64, issueNo uint64) templ.SafeURL {
  return templ.URL(fmt.Sprintf("/project/%d/issue/%d/comment", projectNo, issueNo))
}

func renderIssueBody(bodyStr string) string {
  out := &strings.Builder{}
  if err := goldmark.Convert([]byte(bodyStr), out); err != nil {
    logrus.WithError(err).Error("markdown render error")
    return ""
  }

  return out.String()
}

func makeUserPrefix(issueNo uint64) string {
  return fmt.Sprintf("issue-%d", issueNo)
}

func makeActivityFeedID(issueNo uint64) string {
  return fmt.Sprintf("activity-feed-%d", issueNo)
}

script onContainerClick(containerId string) {
  const cb = document.querySelector("#" + containerId + " input[type=checkbox][name=issue-no]");
  cb.checked = !cb.checked;
}

script onShowDetails(containerId string) {
  const container = document.querySelector("#" + containerId);
  if (!container.classList.contains("hidden")) {
    container.classList.add("hidden");
  } else {
    document.querySelectorAll(".brainslurp-detail:not(.hidden)").forEach((elem) => {
      elem.classList.add("hidden")
    });
    
    container.classList.remove("hidden");
  }
}

templ IssueRow(
  projectNo uint64,
  issue *pb_issue.Issue,
  issueFlows []*pb_flow.Flow,
  tagMap map[uint64]*pb_tag.Tag,
  userMap map[uint64]*pb_user.User,
) {
  <div class="bg-white even:bg-stone-100 first:rounded-t-lg last:rounded-b-lg" id={ makeIssueRowID(issue.GetNumber()) }>
    <div class="px-2 py-0.5 flex items-center" onclick={ onContainerClick(makeIssueRowID(issue.GetNumber())) }>
      <!-- Select CB -->
      <div class="flex-initial">
        <input type="checkbox" name="issue-no" value={ fmt.Sprintf("%d", issue.GetNumber()) } />
      </div>

      <!-- ICON -->
      <div class="w-12 flex-initial">
        switch issue.GetCategory() {
          case pb_issue.IssueCategory_Unknown:
            @Codicon("squirrel", false)
          case pb_issue.IssueCategory_Bug:
            @Codicon("bug", false)
          case pb_issue.IssueCategory_Feature:
            @Codicon("beaker", false)
          case pb_issue.IssueCategory_Operations:
            @Codicon("server-environment", false)
          case pb_issue.IssueCategory_Question:
            @Codicon("question", false)
        }
      </div>

      <!-- TITLE -->
      <span class="flex-1">{ issue.GetTitle() }</span>

      if len(issue.GetAssignedTo()) > 0 {
        <div class="flex-initial flex gap-1 mr-2">
          for _, assigneUserNo := range issue.GetAssignedTo() {
            @User(userMap[assigneUserNo], UserOptions{
              IdPrefix: makeUserPrefix(issue.GetNumber()),
              UnassignURL: makeUnassignActionURL(projectNo, issue.GetNumber(), assigneUserNo),
            })
          }
        </div>
      }

      <!-- TAGS -->
      <div class="flex flex-initial mr-8">
        for _, issueTagNo := range issue.GetTagNumbers() {
          @Tag(projectNo, tagMap[issueTagNo].GetTitle(), tagMap[issueTagNo].GetHexColor(), TagOptions{
            ShowDelete: true,
            DeleteURL: makeRemoveTagURL(projectNo, issue.GetNumber(), issueTagNo),
            DeleteSelector: "#" + makeIssueRowID(issue.GetNumber()),
          })
        }
      </div>

      <!-- ACTIONS -->
      <div class="flex flex-initial pr-4" onclick="event.stopPropagation();">
        @Button(ButtonOptions{
          InButtonRow: true,
          OnClick: onShowDetails(makeIssueDetailsID(issue.GetNumber())),
        }) {
          Details
        }
        for _, issueFlow := range issueFlows {
          for actionIndex, flowAction := range issueFlow.GetActions() {
            @HxLink(makeFlowActionURL(
              projectNo,
              issue.GetNumber(),
              issueFlow.GetNumber(),
              actionIndex,
            ), "#" + makeIssueRowID(issue.GetNumber()), HxLinkOptions{
              ButtonOptions: ButtonOptions{InButtonRow: true, Primary: false},
              UseButtonStyle: true,
              Method: "post",
            }) {
              { flowAction.GetTitle() }
            }
          }
        }
      </div>
    </div>

    <!-- Issue Details box -->
    <div class="hidden brainslurp-detail" id={ makeIssueDetailsID(issue.GetNumber()) }>
      <div class="flex items-center mx-10 gap-2 mb-2">
        <p class="flex-initial text-sm">
          created 
          @Time(issue.GetCreatedAt(), TimeOptions{})
        </p>
        <p class="flex-initial text-sm">
          <span class="mr-1">by</span>
          @User(userMap[issue.GetCreatedBy()], UserOptions{})
        </p>
      </div>
      
      if issue.GetBody() != "" {
        <div class="mb-1 mx-10">
          <article class="bg-slate-200 rounded-xl border p-5">
            @templ.Raw(renderIssueBody(issue.GetBody()))
          </article>
        </div>
      }

      <div class="flex gap-3 justify-between mx-10">  
        <!-- Tag Form -->
        <form
          hx-post={ string(makeNewTagURL(projectNo, issue.GetNumber())) }
          hx-target={ "#" + makeIssueRowID(issue.GetNumber()) }
          hx-swap="outerHTML"
          class="flex-1 pb-2"
        >
          <h4 class="text-lg pb-1 italic">Add Tag</h4>
          @FormDropdownField("tag_id", "Tag", FormFieldOptions{}) {
            for _, tagObj := range tagMap {
              <option value={ fmt.Sprintf("%d", tagObj.GetNumber()) }>
                { tagObj.GetTitle() }
              </option>
            }
          }
          @Button(ButtonOptions{TypeSubmit: true}) {
            Add
          }
        </form>

        <form
          hx-post={ string(makeAssignActionURL(projectNo, issue.GetNumber())) }
          hx-target={ "#" + makeIssueRowID(issue.GetNumber()) }
          hx-swap="outerHTML"
          class="flex-1 pb-2"
        >
          <h4 class="text-lg pb-1 italic">Add Assignee</h4>
          @FormDropdownField("assign_user", "User", FormFieldOptions{}) {
            for _, projectUser := range userMap {
              <option value={ fmt.Sprintf("%d", projectUser.GetNumber()) }>
                { projectUser.GetName() }
              </option>
            }
          }
          @Button(ButtonOptions{
            TypeSubmit: true,
            Small: true,
          }) {
            Assign
          }
        </form>

        <!-- Flow list -->
        <div class="flex-1">
          <h4 class="text-lg pb-1 italic">Connected flows</h4>
          <ol class="list-disc list-inside">
            for _, issueFlow := range issueFlows {
              <li>{ issueFlow.GetTitle() }</li>
            }
          </ol>
        </div>
      </div>

      <!-- Activity feed -->
      <div class="flex flex-col mx-10 mb-10 gap-2" id={ makeActivityFeedID(issue.GetNumber()) }>
        <h2 class="text-xl italic underline ml-2">
          @Codicon("comment-discussion", false)
          Activity feed
        </h2>
        for i := len(issue.GetActivities()) - 1; i > -1; i -= 1  {
          @CommentBox(issue.GetActivities()[i], userMap)
        }
        <article 
          class="bg-slate-200 rounded-xl border p-5"
          x-data="{ open: false }"
          x-init={ `$watch('open', value => {
              if (open) {
                  htmx.process(document.querySelector('#` + makeActivityFeedID(issue.GetNumber()) + `'))
              }
          })` }
        >
          <template x-if="open">
            <form 
              hx-post={ string(makeNewCommentURL(projectNo, issue.GetNumber())) }
              hx-target={ "#" + makeActivityFeedID(issue.GetNumber()) + " h2" }
              hx-swap="afterend"
            >
              <textarea class="w-full p-1 min-h-32" name="comment"></textarea>
              <div class="flex gap-2 mt-2">
                @Button(ButtonOptions{AlpineOnClick: "open = false"}) {
                  Cancel
                }
                @Button(ButtonOptions{TypeSubmit: true, Primary: true}) {
                  Submit
                }
              </div>
              <hr class="my-2 border-white" />
            </form>
          </template>
          <template x-if="!open">
            @Button(ButtonOptions{AlpineOnClick: "open = true"}) {
              Add comment
            }
          </template>
        </article>
      </div>
    </div>
  </div>
}

templ CommentBox(issueActivity *pb_issue.IssueActivity, userMap map[uint64]*pb_user.User) {
  <article class="bg-slate-200 rounded-xl border">
    <header class="px-5 py-2">
      <div class="flex items-center justify-between">
        <h3 class="text-lg">
          @User(userMap[issueActivity.GetTriggerUser()], UserOptions{})
        </h3>
        @Time(issueActivity.GetCreatedAt(), TimeOptions{})
      </div>
      <hr class="my-2 border-white" />
    </header>
    <div class="px-5 pb-5">
      <p>{ issueActivity.GetBody() }</p>
      <hr class="my-2 border-white" />
    </div>
  </article>
}