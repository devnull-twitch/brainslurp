package shared

type (
  FormHXOptions struct {
    Method string
    URL templ.SafeURL
    Swap string
    TargetSelector string
  }
  FormFieldOptions struct {
    Small bool
    ExtraSpacey bool
    Placeholder string
    Required bool
    InitialValue string
    HXOptions FormHXOptions
  }
)

templ FormField(name string, label string, fieldType string, opts FormFieldOptions) {
  if opts.Small {
    if fieldType == "color" {
      <label for={ name } classs="mb-1">{ label }:</label>
    }
    @FormInput(name, fieldType, opts.InitialValue, label)
  } else {
    <div class={ "flex flex-col", templ.KV("mb-8", opts.ExtraSpacey), templ.KV("mb-4", !opts.ExtraSpacey) }>
      <label for={ name } classs="mb-1">{ label }:</label>
      @FormInput(name, fieldType, opts.InitialValue, opts.Placeholder)
    </div>
  }
}

templ FormInput(name string, fieldType string, value string, placeholder string) {
  <input 
    class={ "p-2 rounded", templ.KV("border border-slate-700", fieldType != "color") } 
    type={ fieldType }
    name={ name }
    id={ name }
    placeholder={ placeholder }
    if value != "" {
      value={ value }
    }
  />
}

templ FormDropdownField(name string, label string, opts FormFieldOptions) {
  if opts.Small {
    @FormDropdown(name, opts.Required, opts.InitialValue, opts.HXOptions)
  } else {
    <div class={ "flex flex-col", templ.KV("mb-8", opts.ExtraSpacey), templ.KV("mb-4", !opts.ExtraSpacey) }>
      <label for={ name } classs="mb-1">{ label }:</label>
      @FormDropdown(name, opts.Required, opts.InitialValue, opts.HXOptions) {
        { children... }
      }
    </div>
  }
}

templ FormDropdown(name string, req bool, value string, hxOptions FormHXOptions) {
  <select 
    class="p-2 rounded border border-slate-700"
    name={ name }
    id={ name }
    if value != "" {
      value={ value }
    }
    if req {
      required="true"
    }
    if hxOptions.URL != "" {
      hx-include="this"
      hx-target={ hxOptions.TargetSelector }
      if hxOptions.Method == "" || hxOptions.Method == "get" {
        hx-get={ string(hxOptions.URL) }
      }
      if hxOptions.Method == "post" {
        hx-post={ string(hxOptions.URL) }
      }
      if hxOptions.Method == "delete" {
        hx-delete={ string(hxOptions.URL) }
      }
      if hxOptions.Method == "put" {
        hx-put={ string(hxOptions.URL) }
      }
      if hxOptions.Swap != "" {
        hx-swap={ hxOptions.Swap }
      }
    }
  >
    { children... }
  </select>
}

templ FormOption(label string, value string, selectedValue string) {
  <option
    value={ value }
    if selectedValue == value {
      selected
    }
  >
    { label }
  </option>
}

templ FormTextareaField(name string, label string, opts FormFieldOptions) {
  if opts.Small {
    @FormTextarea(name)
  } else {
    <div class={ "flex flex-col", templ.KV("mb-8", opts.ExtraSpacey), templ.KV("mb-4", !opts.ExtraSpacey) }>
      <label for={ name } classs="mb-1">{ label }:</label>
      @FormTextarea(name)
    </div>
  }
}

templ FormTextarea(name string) {
  <textarea name={ name } id={ name } class="w-full p-2 min-h-16 rounded border border-slate-700"></textarea>
}